// Code generated by MockGen. DO NOT EDIT.
// Source: ./messager.go
//
// Generated by this command:
//
//	mockgen -source ./messager.go -destination ./mock/messager.go
//

// Package mock_discogpt is a generated GoMock package.
package mock_discogpt

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGeneratorMessager is a mock of GeneratorMessager interface.
type MockGeneratorMessager struct {
	ctrl     *gomock.Controller
	recorder *MockGeneratorMessagerMockRecorder
}

// MockGeneratorMessagerMockRecorder is the mock recorder for MockGeneratorMessager.
type MockGeneratorMessagerMockRecorder struct {
	mock *MockGeneratorMessager
}

// NewMockGeneratorMessager creates a new mock instance.
func NewMockGeneratorMessager(ctrl *gomock.Controller) *MockGeneratorMessager {
	mock := &MockGeneratorMessager{ctrl: ctrl}
	mock.recorder = &MockGeneratorMessagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGeneratorMessager) EXPECT() *MockGeneratorMessagerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockGeneratorMessager) Run(ctx context.Context, errch chan error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", ctx, errch)
}

// Run indicates an expected call of Run.
func (mr *MockGeneratorMessagerMockRecorder) Run(ctx, errch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockGeneratorMessager)(nil).Run), ctx, errch)
}
