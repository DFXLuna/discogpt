// Code generated by MockGen. DO NOT EDIT.
// Source: ./messager.go
//
// Generated by this command:
//
//	mockgen -source ./messager.go -destination ./mock/messager.go
//

// Package mock_discogpt is a generated GoMock package.
package mock_discogpt

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMessager is a mock of Messager interface.
type MockMessager struct {
	ctrl     *gomock.Controller
	recorder *MockMessagerMockRecorder
}

// MockMessagerMockRecorder is the mock recorder for MockMessager.
type MockMessagerMockRecorder struct {
	mock *MockMessager
}

// NewMockMessager creates a new mock instance.
func NewMockMessager(ctrl *gomock.Controller) *MockMessager {
	mock := &MockMessager{ctrl: ctrl}
	mock.recorder = &MockMessagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessager) EXPECT() *MockMessagerMockRecorder {
	return m.recorder
}

// GetInput mocks base method.
func (m *MockMessager) GetInput(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInput", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInput indicates an expected call of GetInput.
func (mr *MockMessagerMockRecorder) GetInput(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInput", reflect.TypeOf((*MockMessager)(nil).GetInput), ctx)
}

// SendOutput mocks base method.
func (m *MockMessager) SendOutput(ctx context.Context, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendOutput", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendOutput indicates an expected call of SendOutput.
func (mr *MockMessagerMockRecorder) SendOutput(ctx, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOutput", reflect.TypeOf((*MockMessager)(nil).SendOutput), ctx, message)
}
